//
// This file was auto-generated from Animator assets in Unity Project Mesh101.unity.
//

// <auto-generated />

namespace MeshApp.Animations
{
    using System;
    using Microsoft.MeshApps;
    using Microsoft.MeshApps.Dom;

    [UserCreatable(false)]
    public class OculusTouchQuest2LeftAnimationAnimator : AnimationNode
    {
        private readonly float[] _button1Speeds = { 1F, };
        private readonly float[] _button2Speeds = { 1F, };
        private readonly float[] _button3Speeds = { 1F, };
        private readonly float[] _gripSpeeds = { 1F, };
        private readonly float[] _triggerSpeeds = { 1F, };
        private readonly float[] _joystickSpeeds = { 1F, };

        protected OculusTouchQuest2LeftAnimationAnimator(in Guid ahandle, bool transfer)
        : base(ahandle, transfer)
        {
        }

        public enum Button1State
        {
            Button1,
        }

        public enum Button2State
        {
            Button2,
        }

        public enum Button3State
        {
            Button3,
        }

        public enum GripState
        {
            Grip,
        }

        public enum TriggerState
        {
            Trigger,
        }

        public enum JoystickState
        {
            Joystick,
        }

        [Replication(ReplicationKind.Full)]
        public Button1State CurrentButton1State
        {
            get => (Button1State)GetIntPropertyValue(nameof(CurrentButton1State));
            set
            {
                SetIntPropertyValue(nameof(CurrentButton1State), (int)value);
                SystemTimeOfButton1Updated = Application.ToServerTime(DateTime.UtcNow);
            }
        }

        [Replication(ReplicationKind.Full)]
        public float Button1Speed
        {
            get => _button1Speeds[GetIntPropertyValue(nameof(CurrentButton1State))];
        }

        [Replication(ReplicationKind.Full)]
        internal TimeStamp SystemTimeOfButton1Updated
        {
            get => GetTimeStampPropertyValue(nameof(SystemTimeOfButton1Updated));
            set => SetTimeStampPropertyValue(nameof(SystemTimeOfButton1Updated), value);
        }

        [Replication(ReplicationKind.Full)]
        public Button2State CurrentButton2State
        {
            get => (Button2State)GetIntPropertyValue(nameof(CurrentButton2State));
            set
            {
                SetIntPropertyValue(nameof(CurrentButton2State), (int)value);
                SystemTimeOfButton2Updated = Application.ToServerTime(DateTime.UtcNow);
            }
        }

        [Replication(ReplicationKind.Full)]
        public float Button2Speed
        {
            get => _button2Speeds[GetIntPropertyValue(nameof(CurrentButton2State))];
        }

        [Replication(ReplicationKind.Full)]
        internal TimeStamp SystemTimeOfButton2Updated
        {
            get => GetTimeStampPropertyValue(nameof(SystemTimeOfButton2Updated));
            set => SetTimeStampPropertyValue(nameof(SystemTimeOfButton2Updated), value);
        }

        [Replication(ReplicationKind.Full)]
        public Button3State CurrentButton3State
        {
            get => (Button3State)GetIntPropertyValue(nameof(CurrentButton3State));
            set
            {
                SetIntPropertyValue(nameof(CurrentButton3State), (int)value);
                SystemTimeOfButton3Updated = Application.ToServerTime(DateTime.UtcNow);
            }
        }

        [Replication(ReplicationKind.Full)]
        public float Button3Speed
        {
            get => _button3Speeds[GetIntPropertyValue(nameof(CurrentButton3State))];
        }

        [Replication(ReplicationKind.Full)]
        internal TimeStamp SystemTimeOfButton3Updated
        {
            get => GetTimeStampPropertyValue(nameof(SystemTimeOfButton3Updated));
            set => SetTimeStampPropertyValue(nameof(SystemTimeOfButton3Updated), value);
        }

        [Replication(ReplicationKind.Full)]
        public GripState CurrentGripState
        {
            get => (GripState)GetIntPropertyValue(nameof(CurrentGripState));
            set
            {
                SetIntPropertyValue(nameof(CurrentGripState), (int)value);
                SystemTimeOfGripUpdated = Application.ToServerTime(DateTime.UtcNow);
            }
        }

        [Replication(ReplicationKind.Full)]
        public float GripSpeed
        {
            get => _gripSpeeds[GetIntPropertyValue(nameof(CurrentGripState))];
        }

        [Replication(ReplicationKind.Full)]
        internal TimeStamp SystemTimeOfGripUpdated
        {
            get => GetTimeStampPropertyValue(nameof(SystemTimeOfGripUpdated));
            set => SetTimeStampPropertyValue(nameof(SystemTimeOfGripUpdated), value);
        }

        [Replication(ReplicationKind.Full)]
        public TriggerState CurrentTriggerState
        {
            get => (TriggerState)GetIntPropertyValue(nameof(CurrentTriggerState));
            set
            {
                SetIntPropertyValue(nameof(CurrentTriggerState), (int)value);
                SystemTimeOfTriggerUpdated = Application.ToServerTime(DateTime.UtcNow);
            }
        }

        [Replication(ReplicationKind.Full)]
        public float TriggerSpeed
        {
            get => _triggerSpeeds[GetIntPropertyValue(nameof(CurrentTriggerState))];
        }

        [Replication(ReplicationKind.Full)]
        internal TimeStamp SystemTimeOfTriggerUpdated
        {
            get => GetTimeStampPropertyValue(nameof(SystemTimeOfTriggerUpdated));
            set => SetTimeStampPropertyValue(nameof(SystemTimeOfTriggerUpdated), value);
        }

        [Replication(ReplicationKind.Full)]
        public JoystickState CurrentJoystickState
        {
            get => (JoystickState)GetIntPropertyValue(nameof(CurrentJoystickState));
            set
            {
                SetIntPropertyValue(nameof(CurrentJoystickState), (int)value);
                SystemTimeOfJoystickUpdated = Application.ToServerTime(DateTime.UtcNow);
            }
        }

        [Replication(ReplicationKind.Full)]
        public float JoystickSpeed
        {
            get => _joystickSpeeds[GetIntPropertyValue(nameof(CurrentJoystickState))];
        }

        [Replication(ReplicationKind.Full)]
        internal TimeStamp SystemTimeOfJoystickUpdated
        {
            get => GetTimeStampPropertyValue(nameof(SystemTimeOfJoystickUpdated));
            set => SetTimeStampPropertyValue(nameof(SystemTimeOfJoystickUpdated), value);
        }

        [Replication(ReplicationKind.Full)]
        public float Button1
        {
            get => GetFloatPropertyValue(nameof(Button1));
            set => SetFloatPropertyValue(nameof(Button1), value);
        }

        [Replication(ReplicationKind.Full)]
        public float Button2
        {
            get => GetFloatPropertyValue(nameof(Button2));
            set => SetFloatPropertyValue(nameof(Button2), value);
        }

        [Replication(ReplicationKind.Full)]
        public float Button3
        {
            get => GetFloatPropertyValue(nameof(Button3));
            set => SetFloatPropertyValue(nameof(Button3), value);
        }

        [Replication(ReplicationKind.Full)]
        public float Grip
        {
            get => GetFloatPropertyValue(nameof(Grip));
            set => SetFloatPropertyValue(nameof(Grip), value);
        }

        [Replication(ReplicationKind.Full)]
        public float Trigger
        {
            get => GetFloatPropertyValue(nameof(Trigger));
            set => SetFloatPropertyValue(nameof(Trigger), value);
        }

        [Replication(ReplicationKind.Full)]
        public float JoyX
        {
            get => GetFloatPropertyValue(nameof(JoyX));
            set => SetFloatPropertyValue(nameof(JoyX), value);
        }

        [Replication(ReplicationKind.Full)]
        public float JoyY
        {
            get => GetFloatPropertyValue(nameof(JoyY));
            set => SetFloatPropertyValue(nameof(JoyY), value);
        }

        internal static OculusTouchQuest2LeftAnimationAnimator GetOrCreateInstance(in Guid cookie, bool transfer)
        {
            var result = GetOrCreateDomObject(
                cookie,
                transfer,
                (handle, t) => new OculusTouchQuest2LeftAnimationAnimator(handle, transfer: t));

            return result as OculusTouchQuest2LeftAnimationAnimator;
        }
    }
}